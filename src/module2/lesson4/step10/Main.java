package module2.lesson4.step10;

/**
 * Created by YKuzmich on 04.12.2015.
 * <p>
 * Вам дан список ролей и сценарий пьесы в виде массива строчек.
 * <p>
 * Каждая строчка сценария пьесы дана в следующем виде:
 * Роль: текст
 * <p>
 * Текст может содержать любые символы.
 * <p>
 * Напишите метод, который будет группировать строчки по ролям, пронумеровывать их и возвращать результат в виде готового текста (см. пример). Каждая группа распечатывается в следующем виде:
 * <p>
 * Роль:
 * i) текст
 * j) текст2
 * ...
 * ==перевод строки==
 * <p>
 * i и j -- номера строк в сценарии. Индексация строчек начинается с единицы, выводить группы следует в соответствии с порядком ролей. Переводы строк между группами обязательны, переводы строк в конце текста не учитываются.
 * <p>
 * Заметим, что вам предстоит обработка огромной пьесы в 50 000 строк для 10 ролей – соответственно, неправильная сборка результирующей строчки может выйти за ограничение по времени.
 * <p>
 * Sample Input:
 * roles:
 * Городничий
 * Аммос Федорович
 * Артемий Филиппович
 * Лука Лукич
 * textLines:
 * Городничий: Я пригласил вас, господа, с тем, чтобы сообщить вам пренеприятное известие: к нам едет ревизор.
 * Аммос Федорович: Как ревизор?
 * Артемий Филиппович: Как ревизор?
 * Городничий: Ревизор из Петербурга, инкогнито. И еще с секретным предписаньем.
 * Аммос Федорович: Вот те на!
 * Артемий Филиппович: Вот не было заботы, так подай!
 * Лука Лукич: Господи боже! еще и с секретным предписаньем!
 * Sample Output:
 * Городничий:
 * 1) Я пригласил вас, господа, с тем, чтобы сообщить вам пренеприятное известие: к нам едет ревизор.
 * 4) Ревизор из Петербурга, инкогнито. И еще с секретным предписаньем.
 * <p>
 * Аммос Федорович:
 * 2) Как ревизор?
 * 5) Вот те на!
 * <p>
 * Артемий Филиппович:
 * 3) Как ревизор?
 * 6) Вот не было заботы, так подай!
 * <p>
 * Лука Лукич:
 * 7) Господи боже! еще и с секретным предписаньем!
 */
public class Main {
    private String printTextPerRole(String[] roles, String[] textLines) {
        StringBuilder textForPrint = new StringBuilder();
        for (int j = 0; j < roles.length; j++) {
            textForPrint.append(roles[j] + ":" + "\n");
            for (int i = 0; i < textLines.length; i++) {
                if (!textLines[i].isEmpty()) {
                    int index = textLines[i].indexOf(":");
                    if (roles[j].equals(textLines[i].substring(0, index))) {

                        textForPrint.append((i + 1) + ")" + textLines[i].substring(index + 1, textLines[i].length()) + "\n");
                    }
                }

            }
            textForPrint.append("\n");
        }
        return textForPrint.toString();
    }
}
